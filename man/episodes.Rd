% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/episode_group.R
\name{episodes}
\alias{episodes}
\alias{fixed_episodes}
\alias{rolling_episodes}
\alias{episode_group}
\title{Tacking episodes for case definitions and record deduplication.}
\usage{
episodes(date, sn = NULL, strata = NULL, case_length,
  episode_type = "fixed", recurrence_length = NULL,
  episode_unit = "days", episodes_max = Inf, rolls_max = Inf,
  skip_if_b4_lengths = TRUE, data_source = NULL, data_links = "ANY",
  custom_sort = NULL, skip_order = Inf, from_last = FALSE,
  overlap_methods = "overlap", bi_direction = FALSE,
  group_stats = TRUE, display = "progress", deduplicate = FALSE,
  to_s4 = TRUE, recurrence_from_last = TRUE,
  case_for_recurrence = FALSE, include_index_period = TRUE, x,
  overlap_method = "overlap")

fixed_episodes(..., episode_type = "fixed")

rolling_episodes(..., episode_type = "rolling")

episode_group(df, ...)
}
\arguments{
\item{date}{Event date (\code{date}, \code{datetime} or \code{numeric}) or period (\code{\link{number_line}}).}

\item{sn}{Unique numerical record identifier. Useful for creating familiar episode identifier. Optional.}

\item{strata}{Subsets of the dataset. Episodes are tracked separately within each subset. \code{\link{record_group}} is useful for creating these.}

\item{case_length}{Cut-off point (\code{numeric}) or period (\code{\link{number_line}}) distinguishing one \code{"case"} from another.
This is the case window.}

\item{episode_type}{\code{"fixed"} or \code{"rolling"}.}

\item{recurrence_length}{Cut-off point or period distinguishing a \code{"recurrent"} event from its index \code{"case"}.
This is the recurrence window. If \code{NULL} (default), it's assumed to be the same as \code{case_length}.}

\item{episode_unit}{Time units for \code{case_length} and \code{recurrence_length}. Options are "seconds", "minutes", "hours", "days", "weeks", "months" or "years". See \code{diyar::episode_unit}.}

\item{episodes_max}{Maximum number of episodes permitted within each \code{strata}.}

\item{rolls_max}{Maximum number of times the index \code{"case"} can recur. Only used if \code{episode_type} is \code{"rolling"}.}

\item{skip_if_b4_lengths}{If \code{TRUE} (default), \code{events} before the cut-off points or periods are skipped.}

\item{data_source}{Unique datasource identifier. Useful when the dataset contains data from multiple sources.}

\item{data_links}{A set of \code{data_sources} required in each episode. \code{stratas} without these will be skipped, and episodes without these will be unlinked. See \code{Details}.}

\item{custom_sort}{Preferential order for selecting index (\code{"case"}) events. Useful for tracking episodes in a non-chronological order.}

\item{skip_order}{\code{"nth"} level of \code{custom_sort}. Episodes with index events beyound this level of preference are skipped.}

\item{from_last}{If \code{TRUE}, track episodes in reverse chronological order. If \code{TRUE} (default), track episodes in chronological order.}

\item{overlap_methods}{Methods of overlap considered when tacking event. Different events can be checked by different sets of \code{overlap_methods}}

\item{bi_direction}{If \code{TRUE}, \code{"duplicate"} events before and after the index event are tracked. If  \code{FALSE} (default), \code{"duplicate"} events are tracked in one direction only.}

\item{group_stats}{If \code{TRUE} (default), episode specific information like episode start and end points are returned. See \code{Value}.}

\item{display}{Message printed on screen. Options are; \code{"progress"} (default) or \code{"stats"} for a progress bar or a more detailed breakdown of the tracking process.}

\item{deduplicate}{if \code{TRUE}, \code{"duplicate"} events are excluded from the output.}

\item{to_s4}{If \code{TRUE} (default), episodes are returned as an \code{\link[=epid-class]{epid}} object.}

\item{recurrence_from_last}{If \code{TRUE} (default), the reference event for a \code{recurrence window} will be the last event from the previous window.
If \code{FALSE} (default), it will be the first event. Only used if \code{episode_type} is \code{"rolling"}.}

\item{case_for_recurrence}{If \code{TRUE}, both \code{"case"} and \code{"recurrent"} events will have a case window.
If \code{FALSE} (default), only \code{case events} will have a \code{case window}. Only used if \code{episode_type} is \code{"rolling"}.}

\item{include_index_period}{If \code{TRUE}, overlaps with the index event or period are grouped together even if they are outside the cut-off period.}

\item{x}{Record date or interval. Deprecated. Please use \code{date}}

\item{overlap_method}{Deprecated. Please use \code{overlap_methods}. Methods of overlap considered when tacking event. All event are checked by the same set of \code{overlap_method}.}

\item{df}{\code{data.frame}. One or more datasets appended together. See \code{Details}.}
}
\value{


\code{\link[=epid-class]{epid}} objects or \code{data.frame} if \code{to_s4} is \code{FALSE}

\itemize{
\item \code{sn} - unique record identifier as provided (or generated)
\item \code{epid | .Data} - unique episode identifier
\item \code{wind_id} - unique window identifier
\item \code{wind_nm} - type of window i.e. "Case" or "Recurrence"
\item \code{case_nm} - record type in regards to case assignment
\item \code{dist_from_wind} - duration of each event from its window's reference event
\item \code{dist_from_epid} - duration of each event from its episode's reference event
\item \code{epid_total} - number of records in each episode
\item \code{epid_dataset} - data sources in each episode
\item \code{epid_interval} - episode start and end dates. A \code{\link{number_line}} object.
\item \code{epid_length} - difference between episode start and end dates (\code{difftime}). If possible, it's the same unit as \code{episode_unit} otherwise, a difference in days is returned
\item \code{epid_total} - number of records in each episode
}
}
\description{
Group events into chronological episodes
}
\details{
Episodes are tracked from an index event in chronological or reverse chronological order as determined by \code{from_last}.
You can use \code{custom_sort} for a non-chronological order however, ties will be broken by \code{from_last}.

A \code{"fixed"} episode has a fixed maximum duration determined by \code{case_length}.
However, a \code{"rolling"} episode can continue to recur therefore, its maximum duration is variable.
A \code{"rolling"} episode will last as long as is permitted (\code{rolls_max}) and there's an event within its period of recurrence (\code{recurrence_length}).

\bold{\code{episodes()}} will group every record into 5 type of events;

\itemize{
\item \code{"Case"} - Index case of the episode.
\item \code{"Duplicate_C"} - Duplicate of the index case.
\item \code{"Recurrent"} - Recurrent event of index case.
\item \code{"Duplicate_R"} - Duplicate of the recurrent event.
\item \code{"Skipped"} - Those skipped from the episode tracking process.
}

\code{data_source} - including this returns \code{epid_dataset}. This lists the source of every event in each episode.

\code{data_links} should be a \code{list} with every element named 'l' (links) or 'g' (groups).

\code{data_links} and \code{skip_order} are useful for skipping episodes that are not required to minimise processing time.

\bold{\code{episode_group()}} as it existed up to \code{v0.1.0} has been retired.
Its current implementation only exists to support existing code with minimal disruption. Please use \bold{\code{episodes()}} moving forward.

\bold{\code{fixed_episodes()}} and \bold{\code{rolling_episodes()}} are wrapper functions for the two main use cases - tracking \code{"fixed"} and \code{"rolling"} episodes respectively.
They exist for convenience and to support existing code with minimal disruption.
}
\examples{
library(diyar)
data(infections)
data(hospital_admissions)

db_1 <- infections
db_1$patient_id <- c(rep("PID 1",8), rep("PID 2",3))

# Fixed episodes
# One 16-day (15-day difference) episode per patient
db_1$epids_p <- fixed_episodes(date=db_1$date,
                               strata = db_1$patient_id,
                               case_length = 15,
                               episodes_max = 1)
# Rolling episodes
# Case length of 16 days and recurrence periods of 11 days
db_1$rd_b <- rolling_episodes(db_1$date,
                              case_length = 15,
                              recurrence_length = 10)

# Interval grouping
hospital_admissions$admin_period <- number_line(hospital_admissions$admin_dt,
                                                hospital_admissions$discharge_dt)
admissions <- hospital_admissions[c("admin_period","epi_len")]

# Episodes of overlaping periods of admission
hospital_admissions$epids_i<- fixed_episodes(date=hospital_admissions$admin_period,
                                            case_length = 0,
                                            overlap_methods = "inbetween")

}
\seealso{
\code{\link{record_group}}, \code{\link{overlaps}} and \code{\link{number_line}}
}
