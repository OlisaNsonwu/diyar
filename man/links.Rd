% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/record_group.R
\name{links}
\alias{links}
\alias{sub_criteria}
\alias{range_matching}
\title{Multistage deterministic record linkage}
\usage{
links(criteria, sub_criteria = NULL, sn = NULL, strata = NULL,
  to_s4 = TRUE, data_source = NULL, data_links = "ANY",
  display = "progress")

sub_criteria(..., funcs = NULL)

range_matching(x, tr_x)
}
\arguments{
\item{criteria}{\code{list} of attributes to compare. Comparison is done as an exact match i.e. (\code{==}). See \code{Details}.}

\item{sub_criteria}{\code{list} of additional attributes to compare. Comparison is done as an exact match or a user defined \code{function}. See \code{Details}..}

\item{sn}{Unique numerical record identifier. Useful for creating familiar episode identifier. Optional.}

\item{strata}{Subsets of the dataset. Links are determined separately within each subset.}

\item{to_s4}{If \code{TRUE} (default), record groups are returned as a \code{\link[=pid-class]{pid}} object.}

\item{data_source}{Unique data source identifier. Useful when the dataset contains data from multiple sources.}

\item{display}{Message printed on screen. Options are; \code{"none"} (default) or, \code{"progress"} and \code{"stats"} for a progress update or a more detailed breakdown of the linkage process.}

\item{df}{\code{data.frame}. One or more datasets appended together. See \code{Details}.}

\item{group_stats}{If \code{TRUE} (default), group specific information like record counts. See \code{Value}.}
}
\value{
\code{\link[=pid-class]{pid}} objects or \code{data.frame} if \code{to_s4} is \code{FALSE})

\itemize{
\item \code{sn} - unique record identifier as provided (or generated)
\item \code{pid | .Data} - unique group identifier
\item \code{link_id} - unique record identifier of matching records
\item \code{pid_cri} - matching criteria
\item \code{pid_dataset} - data sources in each group
\item \code{pid_total} - number of records in each group
}
}
\description{
Link records with matching criteria with different levels of relevance.
}
\details{
\bold{\code{links()}} performs an ordered multi-staged deterministic linkage.
The order (relevance/priority) is determined by the order of in which each \code{criteria} is listed.

\code{sub_criteria} specifies additional matching conditions at each stage (\code{criteria}) of the process.
If \code{sub_criteria} is not \code{NULL}, only records with matching \code{criteria} and \code{sub_criteria} are grouped together.
If a record has missing values for any \code{criteria}, that record is skipped at that stage, and another attempt is made at the next stage.
If there are no matches for a record at every stage, that record is assigned a unique group ID.

By default, records are compared as an exact match i.e. the equivalent of \code{(==)} however, user defined functions are also permitted.
The function must be able to compare two atomic vectors,
return only \code{TRUE} or \code{FALSE},
and have two arguments - \code{x} for the attribute and \code{tr_x} for what it'll be compared against.

A match at each stage is considered more relevant than a match at the next stage. Therefore, \code{criteria} should always be listed in order of decreasing relevance.

\code{data_source} - including this returns \code{pid_dataset}. This lists the source of every event in each record group.

\bold{\code{record_group()}} as it existed before \code{v0.2.0} has been retired.
Its current implementation only exists to support existing code with minimal disruption. Please use \bold{\code{links()}} moving forward.
}
\examples{
library(diyar)
three_people <- data.frame(forename=c("Obinna","James","Ojay","James","Obinna"),
                           stringsAsFactors = FALSE)

three_people$pids_a <- record_group(three_people, criteria= forename, to_s4 = TRUE)
three_people

# To handle missing or unknown data, recode missing or unknown values to NA or "".
three_people$forename[c(1,4)] <- NA
three_people$pids_b <- record_group(three_people, criteria= forename, to_s4 =TRUE)
three_people

data(staff_records); staff_records

# Range matching
dob <- staff_records["sex"]
dob$age <- c(30,28,40,25,25,29,27)

# age range: age + 20 years
dob$range_a <- number_line(dob$age, dob$age+20, gid=dob$age)
dob$pids_a <- record_group(dob, criteria = sex, sub_criteria = list(s1a="range_a"), to_s4 = TRUE)
dob[c("sex","age","range_a","pids_a")]

# age range: age +- 20 years
dob$range_b <- number_line(dob$age-20, dob$age+20, gid=dob$age)
dob$pids_b <- record_group(dob, criteria = sex, sub_criteria = list(s1a="range_b"), to_s4 = TRUE)
dob[c("sex","age","range_b","pids_b")]

dob$pids_c <- record_group(dob, criteria = range_b, to_s4 = TRUE)
dob[c("age","range_b","pids_c")]


# Multistage record grouping
staff_records$pids_a <- record_group(staff_records, sn = r_id, criteria = c(forename, surname),
                                     data_source = sex, display = FALSE, to_s4 = TRUE)
staff_records

# Add `sex` to the second stage (`cri`) to be more certain
staff_records$cri_2 <- paste0(staff_records$surname,"-", staff_records$sex)
staff_records$pids_b <- record_group(staff_records, r_id, c(forename, cri_2),
                                     data_source = dataset, display = FALSE, to_s4 = TRUE)
staff_records

# Using sub-criteria
data(missing_staff_id); missing_staff_id

missing_staff_id$pids <- record_group(missing_staff_id, r_id, c(staff_id, age),
list(s2a=c("initials","hair_colour","branch_office")), data_source = source_1, to_s4 = TRUE)

missing_staff_id
}
\seealso{
\code{\link{episodes}} and \code{\link{number_line}}
}
